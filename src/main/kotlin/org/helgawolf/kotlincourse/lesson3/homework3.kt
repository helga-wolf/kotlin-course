package org.helgawolf.kotlincourse.lesson3

//вопросы: 1) изменяемая? 2) тип (Int, String...) 3) когда инициализируем?

//Название мероприятия
val eventName: String = "Супер-офигенный хакатон"

//Дата проведения
val date: String = "13 сентября 2024"
//я погуглила насчет даты-времени, ничего не поняла и решила сделать стрингу

//Место проведения
var place: String = "Moscow"
//по идее место проведения может меняться, но предварительно мы какое-то все равно планируем. хотя то же самое можно сказать и о дате

//Подробный бюджет мероприятия, включая расходы на оборудование, кейтеринг и другие операционные расходы.
var budgetFull: Double by lazy {
}
// бюджет это же число? или это список с названиями? если список тогда String
//добавить доступность?? сделать поле приватным? модификаторы доступа private - поле доступно изнутри класса
// не стоит ставить null тк это потенц проблема

//Количество участников
//lateinit
var participants: Int = 0
    get () = field
    private set (value) {field=value}
//на этапе планирования мы не знаем, сколько человек к нам запишется, поэтому lateinit
// думаю речь о фактчиеском колве а не о максимальном возможном или которое мы примерно планируем
//

//Длительность хакатона
const val duration: Long = 5*60*60
//без понятия, могут ли продлеваться хакатоны, икхожу из того, что длина фиксированная

//Контактная информация и условия соглашений с поставщиками пищи, оборудования и других услуг.
private var vendors: String = "vendors.xlsx"
// ссылка на файл типа
//внешний наблюдатель не сможет работать с этйо перменной

//Текущее состояние хакатона (статус)
var status: String = "не начат"

//Список спонсоров
val sponsors: String = "sponsors.xlsx"
//по аналогии с кейтерингом

//Бюджет мероприятия
var budget Double = 100000.00
//это какая-то сумма, которую мы закладываем изначально, но в прицнипе в нее могут вноситься изменения

//Текущий уровень доступа к интернету
var internet: Int = 100500
//написано "уровень", то есть тут может иметься в виду не просто наличие, а скорось соединения

//Информация о транспортировке оборудования, распределении ресурсов и координации между различными командами поддержки.
private var resourceInfo: String = "info about recources"

//Количество команд
var teams: Int = 0
//меняется по мере рег-ии людей

//Перечень задач
val tasks: String = "tasks"

//План эвакуации
val evacuationPlan: String = "plan.jpg"

//Список доступного оборудования
val availableEquipment: String = "equipmentlist.xlsx"

//Список свободного оборудования
var freeEquipment: String = "equipmentlist.xlsx"

//График питания участников (зависит от поставщика питания, определяемого за неделю до начала)
lateinit var mealPlan: String
// определимся когда будут поставщики

//План мероприятий на случай сбоев
val emergencyPlan: String = "emergencyplan"

//Список экспертов и жюри
var juryList: String = "list"

//Методы и процедуры для сбора отзывов от участников и гостей, включая анонимные опросы и интервью.
val feedback: String by lazy { "" }
//компилируется по запросу на основе всякого фидбэка

//Политика конфиденциальности
val privacyPolicy: String = "policy"

//Приватные отзывы (фидбэк) участников и зрителей для анализа проблем.
private var privateFeedback: String

//Текущая температура в помещении
var temperature: Int = 20

//Мониторинг и анализ производительности сетевого оборудования и интернет-соединения.
var networkMonitoring: String = "ok"

//Уровень освещения
var light: Int = 1005500

//Лог событий мероприятия
private var log: String = "log"

//Доступность медицинской помощи
val ambulance: String = "serviceList" +
//Планы и процедуры для обеспечения безопасности мероприятия, включая планы эвакуации и протоколы чрезвычайных ситуаций.
private val safetyProcedures: String= "dd"

//Регистрационный номер мероприятия
val regNumber Int = 44

//Максимально допустимый уровень шума в помещении хакатона.
val noiseMax Int = 44

//Индикатор превышения уровня шума в помещениях
var noise: Boolean = true
//превысился допустимый - тогда тру

//Формат мероприятия (зависит от геополитической обстановки)
var eventFormat: String = "описание формата??"

//Количество свободных мест для отдыха (например, кресел или диванов), сеттер валидирует, чтобы количество не было меньше нуля.
var sofas: String = 0
    set (value) {
        if (value >=0) field = value
    }


//План взаимодействия с прессой
val pressRelations: String = "план вз-я с прессой"
//считаем, что он задается с самого начала и не меняется после

//Детальная информация о проектах каждой команды, сбор данных включает в себя компиляцию кода и сбор статистики прогона автоматизированных проверок.
var teamsProjeatDetails: String by lazy {
}
//судя по всему, это большой и сложно вычисляемый объем данных, который будет запрашиваться после окончания хакатона

//Статус получения всех необходимых разрешений
var permits: String = "permits"
//если разрешений много, то стринг, а так можно использовать boolean если сделать переменную по каждому разрешению отдельно

//Указывает, открыт ли доступ к эксклюзивным ресурсам (например, специальному оборудованию)
var exclusiveAccess: String = "access"
//по аналогии с предыдущим

//Список партнеров мероприятия
var partnersList: String = "partners"
// допустим, что список может пополняться

//Отчет, включающий фотографии, видео и отзывы, генерируется и становится доступен после завершения мероприятия.
var report: String by lazy {
}

//План распределения призов
val awardsPlan: String = ""
//положим, что план известен заранее и изменению не подлежит

//Контактная информация экстренных служб, медицинского персонала и других важных служб, недоступная участникам.
private val emergencyContacts: String = "contacts"

//Особые условия для участников с ограниченными возможностями
val disabled: String = "disabled"

//Общее настроение участников (определяется опросами)
val mood: String by lazy { "" }
//генерим один раз после мероприятия

//Подробный план хакатона, включающий время и содержание каждого сегмента, инициализируется непосредственно перед началом мероприятия.
lateinit var plan: String
//мзвестен не сразу

//Имя знаменитого специального гостя, которое будет объявлено за день до мероприятия.
lateinit var specialGuest: String
// не знаем гостя на момент планирования

//Максимальное количество людей, которое может вместить место проведения.
val maxCapacity: = 600

//Стандартное количество часов, отведенное каждой команде для работы над проектом.
val timeGiven: = 30
//известно заранее, изменению не подлежит

