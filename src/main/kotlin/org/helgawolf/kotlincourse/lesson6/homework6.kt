package org.helgawolf.kotlincourse.lesson6

//1."Определение Сезона"
//Контекст: Напишите функцию, которая на основе номера месяца возвращает сезон года

fun main() {

    getSeason(8)
}
fun getSeason(month: Int): String {
    return when (month) {
        12, 1, 2 -> ("Зима")
        3, 4, 5 -> ("Весна")
        6, 7, 8 -> ("Лето")
        9, 10, 11 -> ("Осень")
        else -> throw Exception("Некорректный месяц")
    }
}

//2: "Расчет Возраста Питомца"
//Контекст: Создайте функцию, которая преобразует возраст собаки в "человеческие" годы. До 2 лет каждый год собаки равен 10.5 человеческим годам, после - каждый год равен 4 человеческим годам.

fun calculateHumanAge(dogYears: Int): Any {

//до 2лет
    if (dogYears <= 2) {
        return dogYears * 10.5
    }
//после 2 лет
    val yearsAfterTwo = dogYears - 2
    return 21 + yearsAfterTwo * 4
}

//3: "Определение Вида Транспорта"
//Контекст: Напишите функцию, которая определяет, какой вид транспорта лучше использовать, исходя из длины маршрута. Если маршрут до 1 км - "пешком", до 5 км - "велосипед", иначе - "автотранспорт".


fun chooseTransportation(distanceInKm: Int): String {
    return when (distanceInKm) {
        in 0..1 -> "пешком"
        in 2..5 -> "велосипед"
        else -> "автотранспорт"
    }
}

//4: "Расчет Бонусных Баллов"
//Контекст: Клиенты интернет-магазина получают бонусные баллы за покупки. Напишите функцию, которая принимает сумму покупки и возвращает количество бонусных баллов: 2 балла за каждые 100 рублей при сумме покупки до 1000 рублей и 5 баллов за каждые 100 рублей при сумме свыше этого.

fun calculateBonusPoints(amount: Int): Int {
    var bonusPoints = 0

    if (amount > 1000) {
        bonusPoints += amount / 100 * 5
    } else {
        bonusPoints += amount / 100 * 2
    }

    return bonusPoints
}

//5: "Определение Типа Документа"
//Контекст: В системе хранения документов каждый файл имеет расширение. Напишите функцию, которая на основе расширения файла возвращает его тип: "Текстовый документ", "Изображение", "Таблица" или "Неизвестный тип".

fun determineFileTypeByExtensionViaIfElse(fileExtension: String): String {
    return when (fileExtension) {
        ".txt" -> "Текстовый документ"
        ".docx" -> "Текстовый документ"
        ".xlsx" -> "Таблица"
        ".jpg" -> "Изображение"
        ".png" -> "Изображение"
        ".pdf" -> "Текстовый документ"
        else -> "Неизвестный тип"
    }
}

//6: "Конвертация Температуры"
//Контекст: Создайте функцию, которая конвертирует температуру из градусов Цельсия в Фаренгейты и наоборот в зависимости от указанной единицы измерения (C/F). Единицу измерения нужно передать вторым аргументом функции. Несколько аргументов передаются через запятую. Возвращать нужно строку.
//Подсказка: для генерации строки из числа и буквы можно использовать шалон “$result F” для фаренгейта или “$result C” для цельсия



//7: "Подбор Одежды по Погоде"
//Контекст: Напишите функцию, которая на основе температуры воздуха рекомендует тип одежды: "куртка и шапка" при температуре ниже 0, "ветровка" от 0 до 15 градусов и "футболка и шорты" при температуре выше 15. При температурах ниже -30 и выше +35 рекомендуйте не выходить из дома.

fun recommendClothing(temperature: Int): String {
    return when (temperature) {
        in -30..0 -> "куртка и шапка"
        in 1..15 -> "ветровка"
        in 16..35 -> "футболка и шорты"
        else -> "Не рекомендуется выходить из дома"
    }
}

//8: "Выбор Фильма по Возрасту"
//Контекст: Кинотеатр предлагает фильмы разных возрастных категорий. Напишите функцию, которая принимает возраст зрителя и возвращает доступные для него категории фильмов: "детские", "подростковые", "18+".

const val MAX_AGE = 120
fun getFilmCategory(age: Int): String {
    return when (age) {
        in 0..12 -> "детские"
        in 13..17 -> "подростковые"
        in 18..MAX_AGE -> "18+"
        else -> throw IllegalArgumentException("Неверный возраст")
    }
}
